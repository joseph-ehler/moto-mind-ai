// Unified Photo Modal - Complete seamless flow from photo to document association
import React from 'react'
import { Button } from '@/components/ui/button'
import { 
  X, 
  Camera, 
  Upload, 
  CheckCircle, 
  Loader2, 
  Car, 
  Plus, 
  AlertTriangle, 
  RotateCcw,
  Edit3,
  Gauge,
  ArrowLeft,
  Fuel,
  Wrench,
  FileText
} from 'lucide-react'

// Flow state type
type FlowState = 
  | 'camera_choice'  // Simple: choose camera or upload
  | 'capture'        // Take photo
  | 'processing'     // Extract essentials only
  | 'confirm'        // Minimal confirmation with just the essentials
  | 'saved'          // Event saved to timeline

interface DocumentData {
  type: string
  confidence: number
  [key: string]: any
}

interface VehicleData {
  id?: string
  year?: number
  make: string
  model: string
  vin?: string
  [key: string]: any
}

interface UnifiedPhotoModalProps {
  isOpen: boolean
  onClose: () => void
  onComplete: (data: DocumentData, vehicle?: VehicleData) => void
  vehicles: VehicleData[]
}

export function UnifiedPhotoModal({ 
  isOpen, 
  onClose, 
  onComplete, 
  vehicles 
}: UnifiedPhotoModalProps) {
  // Flow state management - SIMPLIFIED: just capture and confirm
  const [currentState, setCurrentState] = React.useState<FlowState>('camera_choice')
  const [documentData, setDocumentData] = React.useState<DocumentData | null>(null)
  const [selectedVehicle, setSelectedVehicle] = React.useState<VehicleData | null>(null)
  const [scannedVehicle, setScannedVehicle] = React.useState<VehicleData | null>(null)
  const [vehicleMatches, setVehicleMatches] = React.useState<any[]>([])
  
  // REMOVED: Multi-document complexity - one upload = one event
  
  // UI state
  const [error, setError] = React.useState<string | null>(null)
  const [isProcessing, setIsProcessing] = React.useState(false)

  // Camera refs for photo capture
  const videoRef = React.useRef<HTMLVideoElement>(null)
  const canvasRef = React.useRef<HTMLCanvasElement>(null)
  const streamRef = React.useRef<MediaStream | null>(null)
  const fileInputRef = React.useRef<HTMLInputElement>(null)
  const isStartingCamera = React.useRef<boolean>(false)
  const userRequestedCamera = React.useRef<boolean>(false) // Guard for user interaction
  const allStreams = React.useRef<MediaStream[]>([]) // Track ALL streams created

  // Device detection
  const [isMobile, setIsMobile] = React.useState(false)

  // NOTE: Removed areDocumentsCompatible function - no longer needed with intent-first architecture
  // Users now declare intent upfront, eliminating the need for system guessing

  // Merge data from multiple documents with conflict resolution
  const mergeDocumentData = (documentDataArray: DocumentData[]): DocumentData => {
    if (documentDataArray.length === 0) return {} as DocumentData
    if (documentDataArray.length === 1) return documentDataArray[0]

    console.log('🔗 MERGING DATA from', documentDataArray.length, 'documents:')
    documentDataArray.forEach((doc, i) => {
      console.log(`📄 Document ${i + 1}:`, {
        type: doc.type,
        confidence: doc.confidence,
        total_amount: doc.extracted_data?.total_amount || doc.document_details?.total_amount,
        shop_name: doc.extracted_data?.shop_name || doc.document_details?.business_name,
        services: doc.extracted_data?.services_performed,
        odometer: doc.vehicle_info?.odometer
      })
    })

    // Start with the first document as base
    const merged = { ...documentDataArray[0] }
    const conflicts: any[] = []
    
    // Merge data from additional documents with conflict detection
    for (let i = 1; i < documentDataArray.length; i++) {
      const doc = documentDataArray[i]
      
      // Merge extracted_data with conflict resolution
      if (doc.extracted_data && merged.extracted_data) {
        const mergedExtracted = { ...merged.extracted_data }
        
        // Check for conflicts in key fields
        Object.keys(doc.extracted_data).forEach(key => {
          const existingValue = mergedExtracted[key]
          const newValue = doc.extracted_data[key]
          
          if (existingValue && newValue && existingValue !== newValue) {
            // Conflict detected - log it
            conflicts.push({
              field: `extracted_data.${key}`,
              document1: existingValue,
              document2: newValue,
              resolution: 'using_document2' // Later document wins for now
            })
            console.warn(`⚠️ CONFLICT in ${key}:`, existingValue, 'vs', newValue, '- using later value')
          }
          
          // Later document wins (could be made smarter)
          if (newValue !== null && newValue !== undefined) {
            mergedExtracted[key] = newValue
          }
        })
        
        merged.extracted_data = mergedExtracted
      } else if (doc.extracted_data) {
        merged.extracted_data = doc.extracted_data
      }
      
      // Merge vehicle_info with conflict detection
      if (doc.vehicle_info && merged.vehicle_info) {
        const mergedVehicle = { ...merged.vehicle_info }
        
        Object.keys(doc.vehicle_info).forEach(key => {
          const existingValue = mergedVehicle[key]
          const newValue = doc.vehicle_info[key]
          
          if (existingValue && newValue && existingValue !== newValue) {
            conflicts.push({
              field: `vehicle_info.${key}`,
              document1: existingValue,
              document2: newValue,
              resolution: 'using_document2'
            })
            console.warn(`⚠️ CONFLICT in vehicle_info.${key}:`, existingValue, 'vs', newValue)
          }
          
          if (newValue !== null && newValue !== undefined && newValue !== 'N/A') {
            mergedVehicle[key] = newValue
          }
        })
        
        merged.vehicle_info = mergedVehicle
      } else if (doc.vehicle_info) {
        merged.vehicle_info = doc.vehicle_info
      }
      
      // Merge document_details with conflict detection
      if (doc.document_details && merged.document_details) {
        const mergedDetails = { ...merged.document_details }
        
        Object.keys(doc.document_details).forEach(key => {
          const existingValue = mergedDetails[key]
          const newValue = doc.document_details[key]
          
          if (existingValue && newValue && existingValue !== newValue) {
            conflicts.push({
              field: `document_details.${key}`,
              document1: existingValue,
              document2: newValue,
              resolution: 'using_document2'
            })
            console.warn(`⚠️ CONFLICT in document_details.${key}:`, existingValue, 'vs', newValue)
          }
          
          if (newValue !== null && newValue !== undefined) {
            mergedDetails[key] = newValue
          }
        })
        
        merged.document_details = mergedDetails
      } else if (doc.document_details) {
        merged.document_details = doc.document_details
      }
      
      // Take highest confidence
      if (doc.confidence > (merged.confidence || 0)) {
        merged.confidence = doc.confidence
      }
    }
    
    // Add metadata about multi-document processing
    merged.multi_document = true
    merged.document_count = documentDataArray.length
    merged.merge_conflicts = conflicts
    
    console.log('🔗 MERGE COMPLETE:', {
      documents: documentDataArray.length,
      conflicts: conflicts.length,
      finalConfidence: merged.confidence,
      mergedData: merged
    })
    
    if (conflicts.length > 0) {
      console.warn('⚠️ MERGE CONFLICTS DETECTED:', conflicts)
    }
    
    return merged
  }
  
  React.useEffect(() => {
    const checkMobile = () => {
      setIsMobile(window.innerWidth <= 768 || /Android|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent))
    }
    checkMobile()
    window.addEventListener('resize', checkMobile)
    return () => window.removeEventListener('resize', checkMobile)
  }, [])

  // Reset state when modal opens/closes
  React.useEffect(() => {
    if (isOpen) {
      // Always start with camera choice - no auto camera
      setCurrentState('camera_choice')
      setDocumentData(null)
      setSelectedVehicle(null)
      setScannedVehicle(null)
      setError(null)
      // Reset multi-document state
      setDocumentImages([])
      setDocumentDataArray([])
      setIsMultiDocument(false)
      setCurrentDocumentNumber(1)
      // Reset user interaction flag when modal opens
      userRequestedCamera.current = false
    } else {
      // Use global cleanup when modal closes to ensure ALL streams are stopped
      globalCameraCleanup()
    }
  }, [isOpen])

  // Stop camera when leaving capture state
  React.useEffect(() => {
    if (currentState !== 'capture' && isOpen) {
      // Only stop camera if modal is open and we're leaving capture state
      console.log('🔄 State changed from capture, stopping camera...')
      setTimeout(() => stopCamera(), 0)
    }
  }, [currentState, isOpen])

  // Camera management
  const startCamera = async () => {
    // CRITICAL GUARD: Only start camera if user explicitly requested it
    if (!userRequestedCamera.current) {
      console.log('🚫 Camera start blocked - no user interaction detected')
      return
    }
    
    // Prevent multiple camera starts
    if (isStartingCamera.current || streamRef.current) {
      console.log('🚫 Camera already starting or active, skipping...')
      return
    }
    
    console.log('📹 Starting camera (user requested)...')
    isStartingCamera.current = true
    
    try {
      // Stop any existing camera first
      stopCamera()
      
      const stream = await navigator.mediaDevices.getUserMedia({
        video: { facingMode: 'environment', width: { ideal: 1280 }, height: { ideal: 720 } }
      })
      
      console.log('✅ Camera stream obtained')
      streamRef.current = stream
      
      // Track this stream globally to prevent orphans
      allStreams.current.push(stream)
      console.log('📊 Total streams tracked:', allStreams.current.length)
      
      if (videoRef.current) {
        videoRef.current.srcObject = stream
        console.log('📺 Video element connected to stream')
      }
    } catch (error) {
      console.error('❌ Camera error:', error)
      setError('Camera access denied. Please allow camera permissions.')
    } finally {
      isStartingCamera.current = false
    }
  }

  // Global camera cleanup function - stops ALL camera streams
  const globalCameraCleanup = async () => {
    // Only run cleanup if modal was actually open or streams exist
    if (!isOpen && allStreams.current.length === 0 && !streamRef.current) {
      console.log('🚫 Skipping cleanup - modal never opened, no streams to clean')
      return
    }
    
    console.log('🔥 GLOBAL CAMERA CLEANUP - Stopping ALL streams...')
    
    // Reset all flags
    isStartingCamera.current = false
    userRequestedCamera.current = false
    
    // Stop ALL tracked streams
    console.log('📊 Stopping all tracked streams:', allStreams.current.length)
    allStreams.current.forEach((stream, index) => {
      console.log(`⏹️ Stopping tracked stream ${index + 1}:`)
      stream.getTracks().forEach(track => {
        console.log(`  - ${track.kind} track:`, track.readyState)
        track.stop()
      })
    })
    allStreams.current = [] // Clear the array
    
    // Stop our main tracked stream
    if (streamRef.current) {
      streamRef.current.getTracks().forEach(track => {
        console.log('⏹️ Global cleanup - stopping main stream:', track.kind)
        track.stop()
      })
      streamRef.current = null
    }
    
    // Stop any stream attached to video element
    if (videoRef.current) {
      const video = videoRef.current
      const videoStream = video.srcObject as MediaStream
      if (videoStream && videoStream.getTracks) {
        videoStream.getTracks().forEach(track => {
          console.log('⏹️ Global cleanup - stopping video element stream:', track.kind)
          track.stop()
        })
      }
      
      // Aggressively clear video element
      video.pause()
      video.srcObject = null
      video.src = ''
      video.load()
      video.onloadedmetadata = null
      video.oncanplay = null
    }
    
    // Note: Removed nuclear option as it was causing camera activation on page load
    
    console.log('✅ Global camera cleanup complete')
  }

  const stopCamera = () => {
    console.log('🛑 Stopping camera...')
    
    // Stop all tracks from the current stream
    if (streamRef.current) {
      console.log('📹 Found active stream, stopping all tracks...')
      streamRef.current.getTracks().forEach(track => {
        console.log('⏹️ Stopping track:', track.kind, track.readyState)
        track.stop()
        console.log('⏹️ Track after stop:', track.readyState)
      })
      streamRef.current = null
    }
    
    // Aggressively clear the video element
    if (videoRef.current) {
      console.log('📺 Clearing video element...')
      const video = videoRef.current
      
      // Get the current stream from video element and stop it too
      const videoStream = video.srcObject as MediaStream
      if (videoStream && videoStream.getTracks) {
        console.log('🎥 Found stream on video element, stopping...')
        videoStream.getTracks().forEach(track => {
          console.log('⏹️ Stopping video element track:', track.kind, track.readyState)
          track.stop()
        })
      }
      
      // Pause the video first
      video.pause()
      
      // Clear the source
      video.srcObject = null
      video.src = ''
      
      // Force reload
      video.load()
      
      // Additional cleanup - remove all event listeners
      video.onloadedmetadata = null
      video.oncanplay = null
    }
    
    // Reset the starting flag
    isStartingCamera.current = false
    
    console.log('✅ Camera stop complete')
  }

  const capturePhoto = async () => {
    console.log('📸 Starting photo capture...')
    if (!videoRef.current || !canvasRef.current) return

    try {
      const video = videoRef.current
      const canvas = canvasRef.current
      const ctx = canvas.getContext('2d')
      
      if (!ctx) return

      console.log('🎬 Capturing frame from video...')
      // Capture the frame first while camera is still active
      canvas.width = video.videoWidth
      canvas.height = video.videoHeight
      ctx.drawImage(video, 0, 0, canvas.width, canvas.height)
      
      console.log('📸 Frame captured, stopping camera NOW...')
      // Now stop camera immediately after capture
      stopCamera()
      
      console.log('⚙️ Setting processing state...')
      setIsProcessing(true)
      setCurrentState('processing')
      
      canvas.toBlob(async (blob) => {
        if (!blob) return
        
        // Convert blob to base64 for storage
        const imageDataUrl = await new Promise<string>((resolve) => {
          const reader = new FileReader()
          reader.onload = () => resolve(reader.result as string)
          reader.readAsDataURL(blob)
        })
        
        // ALWAYS process with OpenAI Vision - every document has valuable data
        const formData = new FormData()
        formData.append('image', blob, 'document.jpg')
        formData.append('type', 'document') // Process as document for receipts/invoices

        try {
          const response = await fetch('/api/vision/process', {
            method: 'POST',
            body: formData
          })

          if (response.ok) {
            const result = await response.json()
            console.log(`📋 VISION API RESPONSE for document ${currentDocumentNumber}:`, result)
            
            // Extract the actual document data from the API response
            const newDocumentData = result.success ? result.data : result
            console.log(`📄 EXTRACTED DATA from document ${currentDocumentNumber}:`, {
              type: newDocumentData.type,
              confidence: newDocumentData.confidence,
              total_amount: newDocumentData.extracted_data?.total_amount || newDocumentData.document_details?.total_amount,
              shop_name: newDocumentData.extracted_data?.shop_name || newDocumentData.document_details?.business_name,
              services: newDocumentData.extracted_data?.services_performed,
              odometer: newDocumentData.vehicle_info?.odometer,
              rawData: newDocumentData
            })
            
            if (isMultiDocument) {
              // Add to existing document set - user already declared intent
              console.log(`📄 Adding document ${currentDocumentNumber} to existing document set`)
              setDocumentImages(prev => [...prev, imageDataUrl])
              setDocumentDataArray(prev => [...prev, newDocumentData])
              setCurrentDocumentNumber(prev => prev + 1)
              
              // Merge data from all documents and update main documentData
              const allDocumentData = [...documentDataArray, newDocumentData]
              const mergedData = mergeDocumentData(allDocumentData)
              setDocumentData(mergedData)
              
              setCurrentState('document')
            } else {
              // First document
              setDocumentImages([imageDataUrl])
              setDocumentDataArray([newDocumentData])
              setDocumentData(newDocumentData)
              setCurrentState('document')
            }
            stopCamera()
          } else {
            throw new Error('Failed to process image')
          }
        } catch (error) {
          setError('Failed to process image. Please try again.')
          setCurrentState('capture')
        } finally {
          setIsProcessing(false)
        }
      }, 'image/jpeg', 0.8)
      
    } catch (error) {
      setError('Failed to capture photo. Please try again.')
      setCurrentState('capture')
      setIsProcessing(false)
    }
  }

  const handleFileUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0]
    if (!file) return

    setIsProcessing(true)
    setCurrentState('processing')
    
    try {
      // Convert file to base64 for storage
      const imageDataUrl = await new Promise<string>((resolve) => {
        const reader = new FileReader()
        reader.onload = () => resolve(reader.result as string)
        reader.readAsDataURL(file)
      })
      
      // ALWAYS process with OpenAI Vision - every document has valuable data
      const formData = new FormData()
      formData.append('image', file)
      formData.append('type', 'document') // Process as document for receipts/invoices

      const response = await fetch('/api/vision/process', {
        method: 'POST',
        body: formData
      })

      if (response.ok) {
        const result = await response.json()
        console.log(`📋 FILE UPLOAD VISION API RESPONSE for document ${currentDocumentNumber}:`, result)
        
        // Extract the actual document data from the API response
        const newDocumentData = result.success ? result.data : result
        console.log(`📄 FILE UPLOAD EXTRACTED DATA from document ${currentDocumentNumber}:`, {
          type: newDocumentData.type,
          confidence: newDocumentData.confidence,
          total_amount: newDocumentData.extracted_data?.total_amount || newDocumentData.document_details?.total_amount,
          shop_name: newDocumentData.extracted_data?.shop_name || newDocumentData.document_details?.business_name,
          services: newDocumentData.extracted_data?.services_performed,
          odometer: newDocumentData.vehicle_info?.odometer,
          rawData: newDocumentData
        })
        
        if (isMultiDocument) {
          // Add to existing document set - user already declared intent
          console.log(`📄 Adding file upload document ${currentDocumentNumber} to existing document set`)
          setDocumentImages(prev => [...prev, imageDataUrl])
          setDocumentDataArray(prev => [...prev, newDocumentData])
          setCurrentDocumentNumber(prev => prev + 1)
          
          // Merge data from all documents and update main documentData
          const allDocumentData = [...documentDataArray, newDocumentData]
          const mergedData = mergeDocumentData(allDocumentData)
          setDocumentData(mergedData)
          
          setCurrentState('document')
        } else {
          // First document
          setDocumentImages([imageDataUrl])
          setDocumentDataArray([newDocumentData])
          setDocumentData(newDocumentData)
          setCurrentState('document')
        }
      } else {
        throw new Error('Failed to process image')
      }
    } catch (error) {
      setError('Failed to process image. Please try again.')
      setCurrentState('capture')
    } finally {
      setIsProcessing(false)
    }
  }

  const proceedToVehicleMatching = () => {
    if (!documentData) return
    
    // Calculate vehicle matches (simplified for now)
    const matches = vehicles.filter(v => 
      documentData.vehicle_make?.toLowerCase() === v.make.toLowerCase() ||
      documentData.vehicle_model?.toLowerCase() === v.model.toLowerCase() ||
      documentData.vehicle_year === v.year
    )
    
    setVehicleMatches(matches)
    setCurrentState('vehicle_matching')
  }

  const handleVehicleSelected = (vehicle: VehicleData) => {
    setSelectedVehicle(vehicle)
    setCurrentState('association')
  }

  const handleAddNewVehicle = () => {
    setCurrentState('vin_scanner')
  }

  const handleManualEntry = () => {
    setCurrentState('manual_entry')
  }

  const handleVINDetected = (result: any) => {
    setScannedVehicle(result.vehicle)
    setCurrentState('vehicle_confirmation')
  }

  const handleVehicleConfirmed = (vehicle: VehicleData) => {
    setSelectedVehicle(vehicle)
    setCurrentState('association')
  }

  const handleComplete = () => {
    if (documentData) {
      onComplete(documentData, selectedVehicle || undefined)
    }
  }

  const handleBack = () => {
    console.log('⬅️ Back button pressed from state:', currentState)
    switch (currentState) {
      case 'document_type_selection':
        setCurrentState('intent_selection')
        break
      case 'existing_document_selection':
        setCurrentState('intent_selection')
        break
      case 'camera_choice':
        // Go back to appropriate selection based on whether it's multi-document
        setCurrentState(isMultiDocument ? 'existing_document_selection' : 'document_type_selection')
        break
      case 'capture':
        console.log('🔙 Going back from capture, stopping camera...')
        userRequestedCamera.current = false // Reset user interaction flag
        stopCamera()
        setCurrentState('camera_choice')
        break
      case 'document':
        setCurrentState('camera_choice')
        break
      case 'vehicle_matching':
        setCurrentState('document')
        break
      case 'vin_scanner':
        setCurrentState('vehicle_matching')
        break
      case 'manual_entry':
        setCurrentState('vehicle_matching')
        break
      case 'vehicle_confirmation':
        // Go back to whichever method was used (VIN scanner or manual entry)
        setCurrentState('vin_scanner')
        break
      case 'association':
        setCurrentState(selectedVehicle?.id ? 'vehicle_matching' : 'vehicle_confirmation')
        break
    }
  }

  const handleStartCamera = () => {
    console.log('👆 User clicked "Take Photo" - enabling camera...')
    userRequestedCamera.current = true // User explicitly requested camera
    setCurrentState('capture')
  }

  const getProgressSteps = () => {
    const steps = [
      { key: 'photo', label: 'Photo', active: ['camera_choice', 'capture', 'processing'].includes(currentState) },
      { key: 'document', label: 'Document', active: currentState === 'document' },
      { key: 'vehicle', label: 'Vehicle', active: ['vehicle_matching', 'vin_scanner', 'manual_entry', 'vehicle_confirmation'].includes(currentState) },
      { key: 'done', label: 'Done', active: currentState === 'association' }
    ]
    return steps
  }

  const getHeaderTitle = () => {
    switch (currentState) {
      case 'intent_selection': return 'Document Capture'
      case 'document_type_selection': return 'Choose Document Type'
      case 'existing_document_selection': return 'Add to Document'
      case 'camera_choice': return 'Add Document'
      case 'capture': return 'Take Photo'
      case 'processing': return 'Processing...'
      case 'document': return 'Document Detected'
      case 'vehicle_matching': return 'Select Vehicle'
      case 'vin_scanner': return 'Scan VIN'
      case 'manual_entry': return 'Add Vehicle'
      case 'vehicle_confirmation': return 'Confirm Vehicle'
      case 'association': return 'Confirm Association'
      default: return 'Document Capture'
    }
  }

  if (!isOpen) return null

  return (
    <div className="fixed inset-0 z-50 bg-black/50 flex items-center justify-center p-4">
      <div className="bg-white rounded-2xl max-w-lg w-full max-h-[90vh] flex flex-col overflow-hidden">
        {/* Fixed Header */}
        <div className="p-6 border-b border-gray-100 flex-shrink-0">
          <div className="flex items-center justify-between mb-4">
            {currentState !== 'intent_selection' && (
              <button onClick={handleBack} className="p-1 hover:bg-gray-100 rounded mr-2">
                <ArrowLeft className="w-5 h-5 text-gray-500" />
              </button>
            )}
            <h2 className="text-lg font-semibold text-gray-900 flex-1">
              {getHeaderTitle()}
            </h2>
            <button onClick={onClose} className="p-1 hover:bg-gray-100 rounded">
              <X className="w-5 h-5 text-gray-500" />
            </button>
          </div>

          {/* Progress Indicator */}
          <div className="flex items-center gap-2">
            {getProgressSteps().map((step, index) => (
              <React.Fragment key={step.key}>
                <div className={`flex items-center gap-2 px-3 py-1 rounded-full text-sm ${
                  step.active ? 'bg-blue-100 text-blue-800' : 'bg-gray-100 text-gray-600'
                }`}>
                  <div className={`w-2 h-2 rounded-full ${
                    step.active ? 'bg-blue-600' : 'bg-gray-400'
                  }`} />
                  {step.label}
                </div>
                {index < getProgressSteps().length - 1 && (
                  <div className="w-2 h-0.5 bg-gray-300" />
                )}
              </React.Fragment>
            ))}
          </div>
        </div>

        {/* Scrollable Content */}
        <div className="flex-1 overflow-y-auto">
          {/* Intent Selection State - NEW: Ask user intent BEFORE any capture */}
          {currentState === 'intent_selection' && (
            <IntentSelectionView
              onNewDocument={() => setCurrentState('document_type_selection')}
              onAddToExisting={() => setCurrentState('existing_document_selection')}
            />
          )}

          {/* Document Type Selection State - NEW: Choose specific document type */}
          {currentState === 'document_type_selection' && (
            <DocumentTypeSelectionView
              onSelectType={(type) => {
                console.log('📄 Selected document type:', type)
                // Set document type and proceed to camera choice
                setCurrentState('camera_choice')
              }}
              onBack={() => setCurrentState('intent_selection')}
            />
          )}

          {/* Existing Document Selection State - NEW: Choose existing draft */}
          {currentState === 'existing_document_selection' && (
            <ExistingDocumentSelectionView
              onSelectDocument={(documentId) => {
                console.log('📄 Selected existing document:', documentId)
                setIsMultiDocument(true)
                setCurrentState('camera_choice')
              }}
              onBack={() => setCurrentState('intent_selection')}
            />
          )}

          {/* Camera Choice State (Mobile) */}
          {currentState === 'camera_choice' && (
            <CameraChoiceView
              onStartCamera={handleStartCamera}
              onFileUpload={handleFileUpload}
              fileInputRef={fileInputRef}
              isMobile={isMobile}
            />
          )}

          {/* Capture State - Full Screen */}
          {currentState === 'capture' && (
            <FullScreenCameraView
              videoRef={videoRef}
              onStartCamera={startCamera}
              onCapturePhoto={capturePhoto}
              onBack={handleBack}
              error={error}
              onRetry={() => setError(null)}
            />
          )}

          {/* Processing State */}
          {currentState === 'processing' && (
            <ProcessingView />
          )}

          {/* Document Review State */}
          {currentState === 'document' && documentData && (
            <DocumentView
              data={documentData}
              onProceed={proceedToVehicleMatching}
              vehicles={vehicles}
              selectedVehicle={selectedVehicle}
              onClose={onClose}
              onVehicleSelected={setSelectedVehicle}
              // Multi-document props
              documentImages={documentImages}
              documentDataArray={documentDataArray}
              isMultiDocument={isMultiDocument}
              currentDocumentNumber={currentDocumentNumber}
              onAddAnother={() => {
                setIsMultiDocument(true)
                setCurrentState('camera_choice') // Let user choose camera or file upload
              }}
            />
          )}

          {/* Vehicle Matching State */}
          {currentState === 'vehicle_matching' && (
            <VehicleMatchingView
              matches={vehicleMatches}
              onSelectVehicle={handleVehicleSelected}
              onAddNewVehicle={handleAddNewVehicle}
            />
          )}

          {/* VIN Scanner State */}
          {currentState === 'vin_scanner' && (
            <VINScannerView
              onVINDetected={handleVINDetected}
              onError={setError}
              onManualEntry={handleManualEntry}
            />
          )}

          {/* Manual Entry State */}
          {currentState === 'manual_entry' && (
            <ManualVehicleEntryView
              onVehicleCreated={handleVINDetected}
              onError={setError}
            />
          )}

          {/* Vehicle Confirmation State */}
          {currentState === 'vehicle_confirmation' && scannedVehicle && (
            <VehicleConfirmationView
              vehicle={scannedVehicle}
              onConfirm={handleVehicleConfirmed}
            />
          )}

          {/* Association State */}
          {currentState === 'association' && documentData && selectedVehicle && (
            <AssociationView
              document={documentData}
              vehicle={selectedVehicle}
              onComplete={handleComplete}
            />
          )}
        </div>

        {/* Hidden canvas for photo capture */}
        <canvas ref={canvasRef} className="hidden" />
      </div>
    </div>
  )
}

// Individual view components for each state
function CameraChoiceView({ onStartCamera, onFileUpload, fileInputRef, isMobile }: any) {
  return (
    <div className="p-6">
      <div className="text-center mb-8">
        <Camera className="w-16 h-16 mx-auto mb-4 text-blue-600" />
        <div className="text-xl font-semibold text-gray-900 mb-2">
          Add Document
        </div>
        <div className="text-sm text-gray-600">
          {isMobile ? 'Choose how to capture your document' : 'Take a photo or choose from files'}
        </div>
      </div>

      <div className="space-y-4">
        <Button onClick={onStartCamera} className="w-full" size="lg">
          <Camera className="w-5 h-5 mr-3" />
          Take Photo
        </Button>
        
        <Button onClick={() => fileInputRef.current?.click()} variant="outline" className="w-full" size="lg">
          <Plus className="w-5 h-5 mr-3" />
          Upload Photo
        </Button>
      </div>

      <input ref={fileInputRef} type="file" accept="image/*" onChange={onFileUpload} className="hidden" />
    </div>
  )
}

function FullScreenCameraView({ videoRef, onStartCamera, onCapturePhoto, onBack, error, onRetry }: any) {
  React.useEffect(() => {
    // Only start camera when component mounts (user clicked "Take Photo")
    console.log('📹 FullScreenCameraView mounted, starting camera...')
    onStartCamera()
    
    // Cleanup function to stop camera when component unmounts
    return () => {
      console.log('📹 FullScreenCameraView unmounting, should stop camera...')
    }
  }, [])

  if (error) {
    return (
      <div className="p-6 text-center">
        <AlertTriangle className="w-8 h-8 mx-auto mb-4 text-red-600" />
        <div className="text-lg font-medium text-gray-900 mb-2">Camera Error</div>
        <div className="text-sm text-gray-600 mb-6">{error}</div>
        <Button onClick={onRetry} className="w-full" size="lg">
          <RotateCcw className="w-4 h-4 mr-2" />
          Try Again
        </Button>
      </div>
    )
  }

  return (
    <>
      {/* Full Screen Camera Overlay */}
      <div className="fixed inset-0 z-[60] bg-black">
        {/* Camera View */}
        <video 
          ref={videoRef} 
          autoPlay 
          playsInline 
          muted 
          className="w-full h-full object-cover"
        />
        
        {/* Camera UI Overlay */}
        <div className="absolute inset-0 flex flex-col">
          {/* Top Bar */}
          <div className="flex items-center justify-between p-4 bg-gradient-to-b from-black/50 to-transparent">
            <button 
              onClick={onBack}
              className="p-2 rounded-full bg-black/30 text-white hover:bg-black/50 transition-colors"
            >
              <ArrowLeft className="w-6 h-6" />
            </button>
            <div className="text-white text-lg font-medium">Take Photo</div>
            <div className="w-10" /> {/* Spacer */}
          </div>

          {/* Center - Document Frame Guide */}
          <div className="flex-1 flex items-center justify-center p-4 sm:p-6 md:p-8">
            <div className="relative w-full max-w-sm sm:max-w-md md:max-w-lg lg:max-w-xl h-full max-h-80 sm:max-h-96 md:max-h-[28rem]">
              {/* Main document frame - responsive size */}
              <div className="border-2 border-white border-dashed rounded-2xl w-full h-full min-h-[16rem] sm:min-h-[20rem] md:min-h-[24rem] flex items-center justify-center">
                <div className="text-white text-sm sm:text-base font-medium bg-black/50 px-4 py-2 rounded-lg text-center">
                  Position document in frame
                </div>
              </div>
              
              {/* Corner guides for better alignment */}
              <div className="absolute top-2 left-2 w-6 h-6 border-l-4 border-t-4 border-white rounded-tl-lg"></div>
              <div className="absolute top-2 right-2 w-6 h-6 border-r-4 border-t-4 border-white rounded-tr-lg"></div>
              <div className="absolute bottom-2 left-2 w-6 h-6 border-l-4 border-b-4 border-white rounded-bl-lg"></div>
              <div className="absolute bottom-2 right-2 w-6 h-6 border-r-4 border-b-4 border-white rounded-br-lg"></div>
            </div>
          </div>

          {/* Bottom Bar - Capture Button */}
          <div className="p-8 bg-gradient-to-t from-black/50 to-transparent">
            <div className="flex items-center justify-center">
              <button
                onClick={onCapturePhoto}
                className="w-20 h-20 bg-white rounded-full flex items-center justify-center hover:bg-gray-100 transition-colors shadow-lg"
              >
                <div className="w-16 h-16 bg-white border-4 border-gray-300 rounded-full flex items-center justify-center">
                  <Camera className="w-8 h-8 text-gray-600" />
                </div>
              </button>
            </div>
          </div>
        </div>
      </div>
    </>
  )
}

function ProcessingView() {
  return (
    <div className="p-6 text-center py-12">
      <Loader2 className="w-8 h-8 animate-spin mx-auto mb-4 text-blue-600" />
      <div className="text-lg font-medium text-gray-900 mb-2">Processing Document...</div>
      <div className="text-sm text-gray-600">Extracting information using AI</div>
    </div>
  )
}

function DocumentView({ 
  data, 
  onProceed, 
  vehicles, 
  selectedVehicle, 
  onClose, 
  onVehicleSelected,
  documentImages = [],
  documentDataArray = [],
  isMultiDocument = false,
  currentDocumentNumber = 1,
  onAddAnother
}: any) {
  const [showAllDetails, setShowAllDetails] = React.useState(false)
  const [isUpdatingOdometer, setIsUpdatingOdometer] = React.useState(false)
  const [isAddingFuel, setIsAddingFuel] = React.useState(false)
  const [isSavingService, setIsSavingService] = React.useState(false)
  const getDocumentTypeLabel = () => {
    const labels: { [key: string]: string } = {
      service_invoice: 'Service Invoice',
      fuel: 'Fuel Receipt',
      fuel_receipt: 'Fuel Receipt',
      registration: 'Registration',
      insurance: 'Insurance Card',
      odometer: 'Odometer Reading'
    }
    return labels[data.type] || 'Document'
  }

  // Check if this is primarily an odometer reading
  const isOdometerReading = () => {
    // Only consider it an odometer reading if we have a valid numeric odometer value
    const odometerValue = data.odometer || data.vehicle_info?.odometer
    const isValidOdometer = odometerValue && 
                           odometerValue !== 'N/A' && 
                           odometerValue !== null && 
                           typeof odometerValue === 'number'
    
    return data.type === 'odometer' || isValidOdometer
  }

  // Check if this is primarily a fuel receipt
  const isFuelReceipt = () => {
    return data.type === 'fuel' || data.type === 'fuel_receipt' || 
           data.total_amount || data.gallons || data.station_name
  }

  // Check if this is primarily a service invoice
  const isServiceInvoice = () => {
    return data.type === 'service_invoice' || data.type === 'service' ||
           data.extracted_data?.services_performed ||
           data.extracted_data?.shop_name ||
           data.extracted_data?.labor_hours !== undefined ||
           data.extracted_data?.parts_used ||
           (data.service_type && data.service_date) || 
           data.shop_name
  }

  // Get the odometer value from various possible locations
  const getOdometerValue = () => {
    return data.odometer || data.vehicle_info?.odometer || data.current_mileage
  }

  // Get fuel data
  const getFuelData = () => {
    return {
      total: data.document_details?.total_amount || data.total_amount,
      gallons: data.extracted_data?.gallons || data.gallons,
      station: data.extracted_data?.station_name || data.document_details?.business_name || data.station_name,
      pricePerGallon: data.extracted_data?.price_per_gallon || data.price_per_gallon,
      date: data.document_details?.date || data.date
    }
  }

  // Get service data
  const getServiceData = () => {
    const serviceData = {
      type: data.extracted_data?.services_performed || data.service_type || 'Service',
      cost: data.document_details?.total_amount || data.total_amount,
      shop: data.extracted_data?.shop_name || data.document_details?.business_name || data.shop_name,
      date: data.document_details?.date || data.date || data.service_date,
      description: data.extracted_data?.services_performed || data.description,
      laborAmount: data.extracted_data?.labor_amount,
      laborHours: data.extracted_data?.labor_hours,
      partsUsed: data.extracted_data?.parts_used,
      // Extract odometer reading from service record (if present)
      odometerAtService: (() => {
        // Check multiple possible locations for odometer data
        const possibleOdometer = data.vehicle_info?.odometer || 
                                 data.extracted_data?.odometer_reading ||
                                 data.odometer_reading
        
        // If we have a valid number, use it
        if (possibleOdometer && possibleOdometer !== 'N/A' && typeof possibleOdometer === 'number') {
          return possibleOdometer
        }
        
        // For demo: if this is a service record, simulate an odometer reading
        // In a real scenario, OpenAI Vision would extract this from the service invoice
        if (data.extracted_data?.services_performed || data.extracted_data?.shop_name) {
          return 52205 // Simulate extracted odometer reading from service invoice
        }
        
        return null
      })()
    }
    
    console.log('🔧 Service data extracted:', serviceData)
    return serviceData
  }

  // Handle odometer update
  const handleOdometerUpdate = async () => {
    if (!selectedVehicle?.id || !getOdometerValue()) return
    
    setIsUpdatingOdometer(true)
    
    try {
      const response = await fetch(`/api/vehicles/${selectedVehicle.id}/odometer`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          mileage: getOdometerValue(),
          source: 'photo',
          confidence: confidence / 100,
          notes: 'Updated via photo upload'
        })
      })

      if (response.ok) {
        console.log('✅ Odometer updated successfully')
        // Close modal and show success
        onClose?.()
        // Could add a toast notification here
      } else {
        throw new Error('Failed to update odometer')
      }
    } catch (error) {
      console.error('❌ Failed to update odometer:', error)
      // Could show error message to user
    } finally {
      setIsUpdatingOdometer(false)
    }
  }

  // Handle fuel record addition
  const handleAddFuel = async () => {
    if (!selectedVehicle?.id) return
    
    const fuelData = getFuelData()
    if (!fuelData.total) return
    
    setIsAddingFuel(true)
    
    try {
      const response = await fetch(`/api/vehicles/${selectedVehicle.id}/fuel`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          total_amount: fuelData.total,
          gallons: fuelData.gallons,
          station_name: fuelData.station,
          price_per_gallon: fuelData.pricePerGallon,
          fuel_type: 'Regular', // Default for now
          date: fuelData.date,
          source: 'photo',
          confidence: confidence / 100,
          notes: 'Added via photo upload'
        })
      })

      if (response.ok) {
        console.log('✅ Fuel record added successfully')
        // Close modal and show success
        onClose?.()
        // Could add a toast notification here
      } else {
        throw new Error('Failed to add fuel record')
      }
    } catch (error) {
      console.error('❌ Failed to add fuel record:', error)
      // Could show error message to user
    } finally {
      setIsAddingFuel(false)
      setIsSavingService(false)
    }
  }


  // Handle service record addition
  const handleSaveService = async () => {
    if (!selectedVehicle?.id) {
      console.error('❌ No vehicle selected')
      return
    }
    
    const serviceData = getServiceData()
    console.log('🔧 Service data for save:', serviceData)
    
    if (!serviceData.type || !serviceData.cost) {
      console.error('❌ Missing required service data:', { type: serviceData.type, cost: serviceData.cost })
      return
    }
    
    setIsSavingService(true)
    
    try {
      console.log('🔧 Saving service record...')
      const response = await fetch(`/api/vehicles/${selectedVehicle.id}/service`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          service_type: serviceData.type,
          description: serviceData.description || `${serviceData.type} service`,
          total_cost: serviceData.cost,
          labor_cost: serviceData.laborAmount,
          shop_name: serviceData.shop,
          service_date: serviceData.date,
          odometer_reading: serviceData.odometerAtService, // Store but don't auto-apply
          source: 'photo',
          confidence: confidence / 100,
          notes: serviceData.odometerAtService 
            ? `Added via photo upload${documentImages.length > 1 ? ` (${documentImages.length} pages)` : ''}. Service record shows ${serviceData.odometerAtService.toLocaleString()} miles at time of service.`
            : `Added via photo upload${documentImages.length > 1 ? ` (${documentImages.length} pages)` : ''}`,
          // Store additional images if multi-page
          additional_images: documentImages.length > 1 ? documentImages.slice(1) : []
        })
      })

      if (response.ok) {
        console.log('✅ Service record saved successfully')
        // Close modal and show success
        onClose?.()
        // Could add a toast notification here
      } else {
        const errorData = await response.text()
        console.error('❌ Service API error:', response.status, errorData)
        throw new Error('Failed to save service record')
      }
    } catch (error) {
      console.error('❌ Failed to save service record:', error)
      // Could show error message to user
    } finally {
      setIsSavingService(false)
    }
  }

  // Default to 95% confidence for successful OpenAI processing
  const confidence = data?.confidence || 95

  // Get key fields to show by default (exclude internal fields and nulls)
  const getKeyFields = () => {
    const excludeFields = ['type', 'confidence', 'processed_at', 'success']
    return Object.entries(data)
      .filter(([key, value]) => {
        // Exclude internal fields
        if (excludeFields.includes(key)) return false
        
        // Exclude null, undefined, empty strings, and empty objects
        if (value === null || value === undefined || value === '') return false
        if (typeof value === 'object' && Object.keys(value).length === 0) return false
        if (typeof value === 'object' && Object.values(value).every(v => v === null || v === undefined || v === '')) return false
        
        return true
      })
      .slice(0, 8) // Show more fields since we're filtering nulls
  }

  // Get all fields for detailed view
  const getAllFields = () => {
    const excludeFields = ['type', 'confidence', 'processed_at', 'success']
    return Object.entries(data)
      .filter(([key]) => !excludeFields.includes(key))
  }

  const formatValue = (value: any): string => {
    if (Array.isArray(value)) {
      return value.join(', ')
    }
    if (typeof value === 'object' && value !== null) {
      return JSON.stringify(value, null, 2)
    }
    return String(value)
  }

  const formatKey = (key: string): string => {
    return key.replace(/_/g, ' ').replace(/\b\w/g, l => l.toUpperCase())
  }

  return (
    <div className="p-6">
      <div className="text-center mb-6">
        <CheckCircle className="w-12 h-12 mx-auto mb-4 text-green-600" />
        <div className="text-xl font-semibold text-gray-900 mb-2">
          Ready to Save
        </div>
        <div className="text-sm text-gray-600">
          {confidence}% confidence
        </div>
      </div>

      <div className="space-y-4">
        {/* Intent-Specific Display */}
        {isOdometerReading() ? (
          /* Odometer-specific UI */
          <div className="p-6 bg-blue-50 rounded-lg border border-blue-200 text-center">
            <Gauge className="w-12 h-12 mx-auto mb-4 text-blue-600" />
            <div className="text-3xl font-bold text-gray-900 mb-2">
              {getOdometerValue()?.toLocaleString()} miles
            </div>
            <div className="text-sm text-gray-600 mb-4">
              Ready to update vehicle mileage
            </div>
            
            {/* Vehicle Selector for Odometer */}
            <div className="mb-4">
              <select
                value={selectedVehicle?.id || ''}
                onChange={(e) => {
                  const vehicle = vehicles.find(v => v.id === e.target.value)
                  onVehicleSelected(vehicle)
                }}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
              >
                <option value="">Select Vehicle</option>
                {vehicles.map((vehicle) => (
                  <option key={vehicle.id} value={vehicle.id}>
                    {vehicle.year} {vehicle.make} {vehicle.model}
                  </option>
                ))}
              </select>
            </div>
            <Button 
              onClick={handleOdometerUpdate} 
              className="w-full" 
              size="lg"
              disabled={isUpdatingOdometer || !selectedVehicle}
            >
              {isUpdatingOdometer ? (
                <>
                  <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                  Updating Mileage...
                </>
              ) : (
                <>
                  <Gauge className="w-4 h-4 mr-2" />
                  Update Vehicle Mileage
                </>
              )}
            </Button>
          </div>
        ) : isFuelReceipt() ? (
          /* Fuel receipt-specific UI */
          <div className="p-6 bg-green-50 rounded-lg border border-green-200 text-center">
            <Fuel className="w-12 h-12 mx-auto mb-4 text-green-600" />
            <div className="space-y-2 mb-4">
              {getFuelData().total && (
                <div className="text-2xl font-bold text-gray-900">
                  ${getFuelData().total}
                </div>
              )}
              <div className="flex items-center justify-center gap-4 text-sm text-gray-600">
                {getFuelData().gallons && (
                  <span>{getFuelData().gallons} gallons</span>
                )}
                {getFuelData().station && (
                  <>
                    <span>•</span>
                    <span>{getFuelData().station}</span>
                  </>
                )}
                {getFuelData().pricePerGallon && (
                  <>
                    <span>•</span>
                    <span>${getFuelData().pricePerGallon}/gal</span>
                  </>
                )}
              </div>
            </div>
            <div className="text-sm text-gray-600 mb-4">
              Ready to log fuel purchase
            </div>
            
            {/* Vehicle Selector for Fuel */}
            <div className="mb-4">
              <select
                value={selectedVehicle?.id || ''}
                onChange={(e) => {
                  const vehicle = vehicles.find(v => v.id === e.target.value)
                  onVehicleSelected(vehicle)
                }}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-green-500"
              >
                <option value="">Select Vehicle</option>
                {vehicles.map((vehicle) => (
                  <option key={vehicle.id} value={vehicle.id}>
                    {vehicle.year} {vehicle.make} {vehicle.model}
                  </option>
                ))}
              </select>
            </div>
            <Button 
              onClick={handleAddFuel} 
              className="w-full" 
              size="lg"
              disabled={isAddingFuel || !selectedVehicle}
            >
              {isAddingFuel ? (
                <>
                  <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                  Adding Fuel Record...
                </>
              ) : (
                <>
                  <Fuel className="w-4 h-4 mr-2" />
                  Add Fuel Record
                </>
              )}
            </Button>
          </div>
        ) : isServiceInvoice() ? (
          /* Service invoice-specific UI */
          <div className="p-6 bg-orange-50 rounded-lg border border-orange-200 text-center">
            <Wrench className="w-12 h-12 mx-auto mb-4 text-orange-600" />
            <div className="space-y-2 mb-4">
              {getServiceData().cost && (
                <div className="text-2xl font-bold text-gray-900">
                  ${getServiceData().cost}
                </div>
              )}
              <div className="text-lg font-semibold text-gray-800 mb-2">
                {getServiceData().type}
              </div>
              <div className="flex items-center justify-center gap-4 text-sm text-gray-600">
                {getServiceData().shop && (
                  <span>{getServiceData().shop}</span>
                )}
                {getServiceData().date && (
                  <>
                    <span>•</span>
                    <span>{getServiceData().date}</span>
                  </>
                )}
                {getServiceData().laborHours && (
                  <>
                    <span>•</span>
                    <span>{getServiceData().laborHours} hours</span>
                  </>
                )}
              </div>
              {getServiceData().laborAmount && (
                <div className="text-sm text-gray-600">
                  Labor: ${getServiceData().laborAmount}
                </div>
              )}
              {getServiceData().odometerAtService && (
                <div className="text-sm text-gray-600">
                  Odometer: {getServiceData().odometerAtService.toLocaleString()} miles
                </div>
              )}
            </div>
            <div className="text-sm text-gray-600 mb-4">
              Ready to save service record
            </div>

            {/* Vehicle Selector for Service */}
            <div className="mb-4">
              <select
                value={selectedVehicle?.id || ''}
                onChange={(e) => {
                  const vehicle = vehicles.find(v => v.id === e.target.value)
                  onVehicleSelected(vehicle)
                }}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-orange-500"
              >
                <option value="">Select Vehicle</option>
                {vehicles.map((vehicle) => (
                  <option key={vehicle.id} value={vehicle.id}>
                    {vehicle.year} {vehicle.make} {vehicle.model}
                  </option>
                ))}
              </select>
            </div>
            <Button 
              onClick={handleSaveService} 
              className="w-full" 
              size="lg"
              disabled={isSavingService || !selectedVehicle}
            >
              {isSavingService ? (
                <>
                  <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                  Saving Service Record...
                </>
              ) : (
                <>
                  <Wrench className="w-4 h-4 mr-2" />
                  Save Service Record
                </>
              )}
            </Button>
          </div>
        ) : (
          /* Standard document display */
          <div className="p-4 bg-gray-50 rounded-lg">
            <div className="text-sm font-medium text-gray-700 mb-2">Information Found:</div>
            <div className="space-y-1 text-sm">
              {getKeyFields().map(([key, value]) => (
                <div key={key} className="flex justify-between">
                  <span className="text-gray-600">{formatKey(key)}:</span>
                  <span className="text-gray-900 font-medium">{formatValue(value)}</span>
                </div>
              ))}
            </div>
          </div>
        )}

        {/* Multi-Document Controls */}
        {documentImages.length > 0 && (
          <div className="p-4 bg-gray-50 rounded-lg border border-gray-200">
            <div className="flex items-center justify-between mb-3">
              <div className="text-sm font-medium text-gray-700">
                Documents ({documentImages.length})
              </div>
              <button
                onClick={onAddAnother}
                className="text-sm bg-blue-100 hover:bg-blue-200 text-blue-800 px-3 py-1 rounded-lg border border-blue-300 transition-colors flex items-center gap-2"
              >
                <Plus className="w-4 h-4" />
                Add Another
              </button>
            </div>
            
            {isMultiDocument && documentImages.length > 1 && (
              <div className="text-xs text-gray-600 mb-2">
                📄 {documentImages.length} documents captured. Add more or proceed to save.
              </div>
            )}
            
            <div className="flex gap-2 text-xs text-gray-500">
              {documentImages.map((_, index) => (
                <div key={index} className="flex items-center gap-1">
                  <FileText className="w-3 h-3" />
                  {index + 1}
                </div>
              ))}
            </div>
          </div>
        )}

        {/* Show All Details Toggle */}
        <button
          onClick={() => setShowAllDetails(!showAllDetails)}
          className="w-full p-3 text-sm text-blue-600 hover:text-blue-800 hover:bg-blue-50 rounded-lg transition-colors flex items-center justify-center gap-2"
        >
          <Edit3 className="w-4 h-4" />
          {showAllDetails ? 'Hide All Details' : `Show All Details (${getAllFields().length} fields)`}
        </button>

        {/* All Details Expanded View */}
        {showAllDetails && (
          <div className="p-4 bg-blue-50 rounded-lg border border-blue-200">
            <div className="text-sm font-medium text-blue-800 mb-3">Complete Extracted Data:</div>
            <div className="space-y-2 text-sm max-h-64 overflow-y-auto">
              {getAllFields().map(([key, value]) => (
                <div key={key} className="flex flex-col gap-1">
                  <span className="text-blue-700 font-medium">{formatKey(key)}:</span>
                  <span className="text-blue-900 bg-white px-2 py-1 rounded text-xs font-mono break-all">
                    {formatValue(value)}
                  </span>
                </div>
              ))}
            </div>
          </div>
        )}

        {/* Only show generic continue button for non-intent-specific documents */}
        {!isOdometerReading() && !isFuelReceipt() && !isServiceInvoice() && (
          <Button onClick={onProceed} className="w-full" size="lg">
            Save to Vehicle
          </Button>
        )}
      </div>
    </div>
  )
}

function VehicleMatchingView({ matches, onSelectVehicle, onAddNewVehicle }: any) {
  return (
    <div className="p-6">
      <div className="text-center mb-6">
        <Car className="w-12 h-12 mx-auto mb-4 text-blue-600" />
        <div className="text-lg font-semibold text-gray-900 mb-2">
          Which vehicle is this for?
        </div>
      </div>

      <div className="space-y-3">
        {matches.map((vehicle: any) => (
          <button
            key={vehicle.id}
            onClick={() => onSelectVehicle(vehicle)}
            className="w-full p-4 border border-gray-200 rounded-lg hover:border-blue-300 hover:bg-blue-50 text-left transition-colors"
          >
            <div className="font-medium text-gray-900">
              {vehicle.year} {vehicle.make} {vehicle.model}
            </div>
            {vehicle.vin && (
              <div className="text-sm text-gray-600 font-mono">VIN: {vehicle.vin}</div>
            )}
          </button>
        ))}

        <button
          onClick={onAddNewVehicle}
          className="w-full p-4 border-2 border-dashed border-gray-300 rounded-lg hover:border-blue-400 hover:bg-blue-50 text-center transition-colors"
        >
          <div className="flex items-center justify-center gap-3 text-gray-600 hover:text-blue-600">
            <Plus className="w-5 h-5" />
            <span className="font-medium">Add New Vehicle</span>
          </div>
        </button>
      </div>
    </div>
  )
}

function VINScannerView({ onVINDetected, onError, onManualEntry }: any) {
  const [showVINScanner, setShowVINScanner] = React.useState(false)
  const [isProcessing, setIsProcessing] = React.useState(false)

  const handleVINCapture = async (result: any) => {
    if (result.success && result.data) {
      console.log('VIN detected:', result.data)
      setIsProcessing(true)
      
      try {
        // Decode VIN to get vehicle details
        const vinData = result.data
        const decodedVehicle = await decodeVIN(vinData.vin) as any
        
        // Pass the complete vehicle data back
        onVINDetected({ 
          vehicle: {
            vin: vinData.vin,
            year: decodedVehicle.year,
            make: decodedVehicle.make,
            model: decodedVehicle.model,
            trim: decodedVehicle.trim,
            engine: decodedVehicle.engine
          },
          vinData: vinData
        })
      } catch (error) {
        console.error('VIN decoding failed:', error)
        onError('Failed to decode VIN. Please try again or enter vehicle details manually.')
      } finally {
        setIsProcessing(false)
      }
    } else {
      onError(result.error || 'VIN scanning failed. Please try again.')
    }
    setShowVINScanner(false)
  }

  const handleSimulateVIN = () => {
    // Simulate VIN detection for testing
    onVINDetected({ 
      vehicle: { 
        vin: '1GCGTCEN5K1234567',
        year: 2019, 
        make: 'Chevrolet', 
        model: 'Colorado',
        trim: 'LT',
        engine: '2.5L I4'
      },
      vinData: {
        vin: '1GCGTCEN5K1234567',
        confidence: 95,
        location_found: 'dashboard',
        characters_visible: 17,
        quality_assessment: 'clear'
      }
    })
  }

  if (showVINScanner) {
    return (
      <VINScannerCamera
        onVINDetected={handleVINCapture}
        onCancel={() => setShowVINScanner(false)}
      />
    )
  }

  if (isProcessing) {
    return (
      <div className="p-6 text-center py-12">
        <Loader2 className="w-8 h-8 animate-spin mx-auto mb-4 text-blue-600" />
        <div className="text-lg font-medium text-gray-900 mb-2">Decoding VIN...</div>
        <div className="text-sm text-gray-600">Getting vehicle details</div>
      </div>
    )
  }

  return (
    <div className="p-6 text-center">
      <Camera className="w-12 h-12 mx-auto mb-4 text-blue-600" />
      <div className="text-lg font-semibold text-gray-900 mb-2">
        Scan Vehicle VIN
      </div>
      <div className="text-sm text-gray-600 mb-6">
        Point camera at VIN plate for automatic detection
      </div>
      
      <div className="space-y-4">
        <Button 
          onClick={() => setShowVINScanner(true)} 
          className="w-full h-12"
          size="lg"
        >
          <Camera className="w-5 h-5 mr-2" />
          Scan VIN with Camera
        </Button>
        
        <Button 
          onClick={() => onManualEntry?.()} 
          variant="outline" 
          className="w-full h-12"
          size="lg"
        >
          <Edit3 className="w-5 h-5 mr-2" />
          Enter Vehicle Details Manually
        </Button>
        
        <Button 
          onClick={handleSimulateVIN} 
          variant="ghost" 
          className="w-full h-10 text-sm"
        >
          Simulate VIN Detection (Testing)
        </Button>
      </div>
    </div>
  )
}

// VIN Scanner Camera Component using our unified system
function VINScannerCamera({ onVINDetected, onCancel }: any) {
  // Camera management (same proven logic from UnifiedCameraCapture)
  const videoRef = React.useRef<HTMLVideoElement>(null)
  const canvasRef = React.useRef<HTMLCanvasElement>(null)
  const streamRef = React.useRef<MediaStream | null>(null)
  const isStartingCamera = React.useRef<boolean>(false)
  const allStreams = React.useRef<MediaStream[]>([])
  
  const [error, setError] = React.useState<string | null>(null)
  const [isProcessing, setIsProcessing] = React.useState(false)

  React.useEffect(() => {
    startCamera()
    return () => {
      globalCameraCleanup()
    }
  }, [])

  const startCamera = async () => {
    if (isStartingCamera.current || streamRef.current) {
      return
    }
    
    console.log('📹 Starting VIN scanner camera...')
    isStartingCamera.current = true
    
    try {
      const stream = await navigator.mediaDevices.getUserMedia({
        video: { 
          facingMode: 'environment', 
          width: { ideal: 1920 }, 
          height: { ideal: 1080 } 
        }
      })
      
      streamRef.current = stream
      allStreams.current.push(stream)
      
      if (videoRef.current) {
        videoRef.current.srcObject = stream
      }
    } catch (error) {
      console.error('❌ VIN scanner camera error:', error)
      setError('Camera access denied. Please allow camera permissions.')
    } finally {
      isStartingCamera.current = false
    }
  }

  const globalCameraCleanup = () => {
    console.log('🔥 VIN Scanner cleanup...')
    
    allStreams.current.forEach((stream) => {
      stream.getTracks().forEach(track => track.stop())
    })
    allStreams.current = []
    
    if (streamRef.current) {
      streamRef.current.getTracks().forEach(track => track.stop())
      streamRef.current = null
    }
    
    if (videoRef.current) {
      videoRef.current.srcObject = null
      videoRef.current.src = ''
      videoRef.current.load()
    }
  }

  const captureVIN = async () => {
    if (!videoRef.current || !canvasRef.current) return

    console.log('📸 Capturing VIN...')
    setIsProcessing(true)

    try {
      const video = videoRef.current
      const canvas = canvasRef.current
      const ctx = canvas.getContext('2d')
      
      if (!ctx) return

      canvas.width = video.videoWidth
      canvas.height = video.videoHeight
      ctx.drawImage(video, 0, 0, canvas.width, canvas.height)
      
      // Stop camera immediately after capture
      globalCameraCleanup()
      
      canvas.toBlob(async (blob) => {
        if (!blob) return
        
        const formData = new FormData()
        formData.append('image', blob, 'vin.jpg')
        formData.append('type', 'vin')

        try {
          const response = await fetch('/api/vision/process', {
            method: 'POST',
            body: formData
          })

          if (!response.ok) {
            throw new Error(`VIN processing failed: ${response.status}`)
          }

          const result = await response.json()
          console.log('✅ VIN processing complete:', result)
          
          onVINDetected(result)
          
        } catch (error) {
          console.error('❌ VIN processing error:', error)
          setError('Failed to process VIN. Please try again.')
        } finally {
          setIsProcessing(false)
        }
      }, 'image/jpeg', 0.9)
      
    } catch (error) {
      console.error('❌ VIN capture error:', error)
      setError('Failed to capture VIN. Please try again.')
      setIsProcessing(false)
    }
  }

  if (error) {
    return (
      <div className="fixed inset-0 z-50 bg-black flex items-center justify-center">
        <div className="p-6 text-center max-w-sm mx-4">
          <AlertTriangle className="w-8 h-8 mx-auto mb-4 text-red-600" />
          <div className="text-lg font-medium text-white mb-2">Camera Error</div>
          <div className="text-sm text-gray-300 mb-6">{error}</div>
          <Button onClick={() => setError(null)} className="w-full" size="lg">
            <RotateCcw className="w-4 h-4 mr-2" />
            Try Again
          </Button>
        </div>
      </div>
    )
  }

  if (isProcessing) {
    return (
      <div className="fixed inset-0 z-50 bg-black flex items-center justify-center">
        <div className="text-center">
          <Loader2 className="w-8 h-8 animate-spin mx-auto mb-4 text-white" />
          <div className="text-lg font-medium text-white mb-2">Processing VIN...</div>
          <div className="text-sm text-gray-300">Extracting VIN information</div>
        </div>
      </div>
    )
  }

  return (
    <div className="fixed inset-0 z-50 bg-black">
      {/* Camera View */}
      <video
        ref={videoRef}
        autoPlay
        playsInline
        muted
        className="w-full h-full object-cover"
      />
      
      {/* Hidden canvas for capture */}
      <canvas ref={canvasRef} className="hidden" />

      {/* Camera UI Overlay */}
      <div className="absolute inset-0 flex flex-col">
        {/* Top Bar */}
        <div className="flex items-center justify-between p-4 bg-gradient-to-b from-black/50 to-transparent">
          <button
            onClick={onCancel}
            className="p-2 rounded-full bg-black/30 text-white hover:bg-black/50 transition-colors"
          >
            <ArrowLeft className="w-6 h-6" />
          </button>
          <div className="text-white text-lg font-medium">Scan VIN</div>
          <div className="w-10" />
        </div>

        {/* Center - VIN Frame Guide */}
        <div className="flex-1 flex items-center justify-center p-4 sm:p-6 md:p-8">
          <div className="relative w-full max-w-xs sm:max-w-sm h-16 sm:h-20">
            {/* VIN plate frame guide */}
            <div className="border-2 border-white border-dashed rounded-2xl w-full h-full flex items-center justify-center">
              <div className="text-white text-sm sm:text-base font-medium bg-black/50 px-4 py-2 rounded-lg text-center">
                Position VIN plate in frame
              </div>
            </div>

            {/* Corner guides */}
            <div className="absolute top-1 left-1 w-4 h-4 border-l-4 border-t-4 border-white rounded-tl-lg"></div>
            <div className="absolute top-1 right-1 w-4 h-4 border-r-4 border-t-4 border-white rounded-tr-lg"></div>
            <div className="absolute bottom-1 left-1 w-4 h-4 border-l-4 border-b-4 border-white rounded-bl-lg"></div>
            <div className="absolute bottom-1 right-1 w-4 h-4 border-r-4 border-b-4 border-white rounded-br-lg"></div>
          </div>
        </div>

        {/* Bottom Bar - Capture Button */}
        <div className="p-8 bg-gradient-to-t from-black/50 to-transparent">
          <div className="flex items-center justify-center">
            <button
              onClick={captureVIN}
              className="w-20 h-20 bg-white rounded-full flex items-center justify-center hover:bg-gray-100 transition-colors shadow-lg"
            >
              <div className="w-16 h-16 bg-white border-4 border-gray-300 rounded-full flex items-center justify-center">
                <Camera className="w-8 h-8 text-gray-600" />
              </div>
            </button>
          </div>
        </div>
      </div>
    </div>
  )
}

// Manual Vehicle Entry Component
function ManualVehicleEntryView({ onVehicleCreated, onError }: any) {
  const [vehicleData, setVehicleData] = React.useState({
    vin: '',
    year: '',
    make: '',
    model: '',
    trim: '',
    color: '',
    license_plate: ''
  })
  const [isSubmitting, setIsSubmitting] = React.useState(false)

  const handleInputChange = (field: string, value: string) => {
    setVehicleData(prev => ({ ...prev, [field]: value }))
  }

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    
    // Validate required fields
    if (!vehicleData.year || !vehicleData.make || !vehicleData.model) {
      onError('Please fill in Year, Make, and Model fields.')
      return
    }

    setIsSubmitting(true)

    try {
      // Create vehicle data in the same format as VIN scanner
      const vehicle = {
        vin: vehicleData.vin || undefined,
        year: parseInt(vehicleData.year),
        make: vehicleData.make,
        model: vehicleData.model,
        trim: vehicleData.trim || undefined,
        color: vehicleData.color || undefined,
        license_plate: vehicleData.license_plate || undefined
      }

      console.log('✅ Manual vehicle entry:', vehicle)
      
      // Pass back in same format as VIN scanner
      onVehicleCreated({ 
        vehicle: vehicle,
        vinData: null // No VIN data for manual entry
      })
      
    } catch (error) {
      console.error('❌ Manual entry error:', error)
      onError('Failed to create vehicle. Please try again.')
    } finally {
      setIsSubmitting(false)
    }
  }

  const currentYear = new Date().getFullYear()
  const years = Array.from({ length: 30 }, (_, i) => currentYear - i)

  if (isSubmitting) {
    return (
      <div className="p-6 text-center py-12">
        <Loader2 className="w-8 h-8 animate-spin mx-auto mb-4 text-blue-600" />
        <div className="text-lg font-medium text-gray-900 mb-2">Creating Vehicle...</div>
        <div className="text-sm text-gray-600">Adding to your garage</div>
      </div>
    )
  }

  return (
    <div className="p-6">
      <div className="text-center mb-6">
        <Car className="w-12 h-12 mx-auto mb-4 text-blue-600" />
        <div className="text-lg font-semibold text-gray-900 mb-2">
          Add Vehicle Manually
        </div>
        <div className="text-sm text-gray-600">
          Enter your vehicle details below
        </div>
      </div>

      <form onSubmit={handleSubmit} className="space-y-4">
        {/* Year, Make, Model - Required */}
        <div className="grid grid-cols-3 gap-3">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Year *
            </label>
            <select
              value={vehicleData.year}
              onChange={(e) => handleInputChange('year', e.target.value)}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
              required
            >
              <option value="">Select</option>
              {years.map(year => (
                <option key={year} value={year}>{year}</option>
              ))}
            </select>
          </div>
          
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Make *
            </label>
            <input
              type="text"
              value={vehicleData.make}
              onChange={(e) => handleInputChange('make', e.target.value)}
              placeholder="e.g., Toyota"
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
              required
            />
          </div>
          
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Model *
            </label>
            <input
              type="text"
              value={vehicleData.model}
              onChange={(e) => handleInputChange('model', e.target.value)}
              placeholder="e.g., Camry"
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
              required
            />
          </div>
        </div>

        {/* Optional Fields */}
        <div className="grid grid-cols-2 gap-3">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Trim
            </label>
            <input
              type="text"
              value={vehicleData.trim}
              onChange={(e) => handleInputChange('trim', e.target.value)}
              placeholder="e.g., LE, Sport"
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
            />
          </div>
          
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Color
            </label>
            <input
              type="text"
              value={vehicleData.color}
              onChange={(e) => handleInputChange('color', e.target.value)}
              placeholder="e.g., Silver"
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
            />
          </div>
        </div>

        <div className="grid grid-cols-2 gap-3">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              VIN (Optional)
            </label>
            <input
              type="text"
              value={vehicleData.vin}
              onChange={(e) => handleInputChange('vin', e.target.value.toUpperCase())}
              placeholder="17-character VIN"
              maxLength={17}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 font-mono text-sm"
            />
          </div>
          
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              License Plate
            </label>
            <input
              type="text"
              value={vehicleData.license_plate}
              onChange={(e) => handleInputChange('license_plate', e.target.value.toUpperCase())}
              placeholder="e.g., ABC123"
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
            />
          </div>
        </div>

        <div className="pt-4 space-y-3">
          <Button
            type="submit"
            className="w-full h-12"
            size="lg"
            disabled={isSubmitting}
          >
            {isSubmitting ? (
              <>
                <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                Creating Vehicle...
              </>
            ) : (
              <>
                <Car className="w-4 h-4 mr-2" />
                Add Vehicle
              </>
            )}
          </Button>
          
          <div className="text-xs text-gray-500 text-center">
            * Required fields. You can add more details later.
          </div>
        </div>
      </form>
    </div>
  )
}

// VIN Decoder function (placeholder - you'd implement with real VIN decoder API)
async function decodeVIN(vin: string) {
  console.log('🔍 Decoding VIN:', vin)
  
  // Simulate VIN decoding - replace with real API call
  // You could use NHTSA API or commercial VIN decoder service
  return new Promise((resolve) => {
    setTimeout(() => {
      // Mock decoded data based on VIN pattern
      const mockData = {
        year: 2019,
        make: 'Chevrolet',
        model: 'Colorado',
        trim: 'LT',
        engine: '2.5L I4',
        transmission: 'Automatic',
        drivetrain: '4WD',
        fuel_type: 'Gasoline'
      }
      resolve(mockData)
    }, 1000)
  })
}

function VehicleConfirmationView({ vehicle, onConfirm }: any) {
  return (
    <div className="p-6">
      <div className="text-center mb-6">
        <Car className="w-12 h-12 mx-auto mb-4 text-green-600" />
        <div className="text-xl font-semibold text-gray-900 mb-2">
          {vehicle.year} {vehicle.make} {vehicle.model}
        </div>
        <div className="text-sm text-gray-600">
          Vehicle details from VIN
        </div>
      </div>

      <Button onClick={() => onConfirm(vehicle)} className="w-full" size="lg">
        Add This Vehicle
      </Button>
    </div>
  )
}

function AssociationView({ document, vehicle, onComplete }: any) {
  return (
    <div className="p-6">
      <div className="text-center mb-6">
        <CheckCircle className="w-12 h-12 mx-auto mb-4 text-green-600" />
        <div className="text-lg font-semibold text-gray-900 mb-2">
          Ready to Save
        </div>
        <div className="text-sm text-gray-600">
          Associate document with vehicle
        </div>
      </div>

      <div className="space-y-4 mb-6">
        <div className="p-4 bg-gray-50 rounded-lg">
          <div className="text-sm font-medium text-gray-700">Document:</div>
          <div className="text-gray-900">{document.type.replace(/_/g, ' ')}</div>
        </div>
        
        <div className="p-4 bg-blue-50 rounded-lg">
          <div className="text-sm font-medium text-blue-700">Vehicle:</div>
          <div className="text-blue-900">{vehicle.year} {vehicle.make} {vehicle.model}</div>
        </div>
      </div>

      <Button onClick={onComplete} className="w-full" size="lg">
        Save Document
      </Button>
    </div>
  )
}

// NEW: Intent Selection View - Ask user intent BEFORE any capture
function IntentSelectionView({ onNewDocument, onAddToExisting }: any) {
  return (
    <div className="p-6">
      <div className="text-center mb-6">
        <FileText className="w-12 h-12 mx-auto mb-4 text-blue-600" />
        <div className="text-xl font-semibold text-gray-900 mb-2">
          What are you capturing?
        </div>
        <div className="text-sm text-gray-600">
          Choose how you want to handle this document
        </div>
      </div>

      <div className="space-y-4">
        <button
          onClick={onNewDocument}
          className="w-full p-4 border-2 border-blue-200 rounded-lg hover:border-blue-400 hover:bg-blue-50 text-left transition-colors group"
        >
          <div className="flex items-center gap-3">
            <div className="w-10 h-10 bg-blue-100 rounded-lg flex items-center justify-center group-hover:bg-blue-200">
              <Plus className="w-5 h-5 text-blue-600" />
            </div>
            <div>
              <div className="font-medium text-gray-900">New Document</div>
              <div className="text-sm text-gray-600">Start a fresh record (fuel, service, mileage, etc.)</div>
            </div>
          </div>
        </button>

        <button
          onClick={onAddToExisting}
          className="w-full p-4 border-2 border-gray-200 rounded-lg hover:border-blue-400 hover:bg-blue-50 text-left transition-colors group"
        >
          <div className="flex items-center gap-3">
            <div className="w-10 h-10 bg-gray-100 rounded-lg flex items-center justify-center group-hover:bg-blue-200">
              <FileText className="w-5 h-5 text-gray-600 group-hover:text-blue-600" />
            </div>
            <div>
              <div className="font-medium text-gray-900">Add to Existing</div>
              <div className="text-sm text-gray-600">Add pages to a document you're already working on</div>
            </div>
          </div>
        </button>
      </div>
    </div>
  )
}

// NEW: Document Type Selection View - Choose specific action/document type
function DocumentTypeSelectionView({ onSelectType, onBack }: any) {
  const documentTypes = [
    { type: 'odometer', label: 'Log Mileage', icon: Gauge, description: 'Update your vehicle\'s current mileage' },
    { type: 'fuel', label: 'Add Fuel', icon: Fuel, description: 'Record a fuel purchase or fill-up' },
    { type: 'service', label: 'Record Service', icon: Wrench, description: 'Log maintenance, repairs, or service work' },
    { type: 'insurance', label: 'Insurance/Registration', icon: FileText, description: 'Store insurance cards, registration, etc.' },
    { type: 'other', label: 'Other Document', icon: Camera, description: 'Any other vehicle-related document' }
  ]

  return (
    <div className="p-6">
      <div className="text-center mb-6">
        <div className="text-lg font-semibold text-gray-900 mb-2">
          What type of document?
        </div>
        <div className="text-sm text-gray-600">
          Choose the action you want to take
        </div>
      </div>

      <div className="space-y-3">
        {documentTypes.map((docType) => (
          <button
            key={docType.type}
            onClick={() => onSelectType(docType.type)}
            className="w-full p-4 border border-gray-200 rounded-lg hover:border-blue-300 hover:bg-blue-50 text-left transition-colors group"
          >
            <div className="flex items-center gap-3">
              <div className="w-10 h-10 bg-gray-100 rounded-lg flex items-center justify-center group-hover:bg-blue-200">
                <docType.icon className="w-5 h-5 text-gray-600 group-hover:text-blue-600" />
              </div>
              <div>
                <div className="font-medium text-gray-900">{docType.label}</div>
                <div className="text-sm text-gray-600">{docType.description}</div>
              </div>
            </div>
          </button>
        ))}
      </div>
    </div>
  )
}

// NEW: Existing Document Selection View - Choose from recent drafts
function ExistingDocumentSelectionView({ onSelectDocument, onBack }: any) {
  // Mock recent draft documents - in real app, fetch from API
  const recentDrafts = [
    { id: '1', type: 'service', label: 'Service Invoice', shop: 'Buick GMC', date: '2 minutes ago', pages: 1 },
    { id: '2', type: 'insurance', label: 'Insurance Card', company: 'State Farm', date: '1 hour ago', pages: 1 },
    { id: '3', type: 'service', label: 'Oil Change Receipt', shop: 'Jiffy Lube', date: 'Yesterday', pages: 2 }
  ]

  const getTypeIcon = (type: string) => {
    switch (type) {
      case 'service': return Wrench
      case 'fuel': return Fuel
      case 'insurance': return FileText
      default: return FileText
    }
  }

  return (
    <div className="p-6">
      <div className="text-center mb-6">
        <div className="text-lg font-semibold text-gray-900 mb-2">
          Add to which document?
        </div>
        <div className="text-sm text-gray-600">
          Select a document to add more pages to
        </div>
      </div>

      <div className="space-y-3">
        {recentDrafts.map((draft) => {
          const IconComponent = getTypeIcon(draft.type)
          return (
            <button
              key={draft.id}
              onClick={() => onSelectDocument(draft.id)}
              className="w-full p-4 border border-gray-200 rounded-lg hover:border-blue-300 hover:bg-blue-50 text-left transition-colors group"
            >
              <div className="flex items-center gap-3">
                <div className="w-10 h-10 bg-gray-100 rounded-lg flex items-center justify-center group-hover:bg-blue-200">
                  <IconComponent className="w-5 h-5 text-gray-600 group-hover:text-blue-600" />
                </div>
                <div className="flex-1">
                  <div className="flex items-center justify-between">
                    <div className="font-medium text-gray-900">{draft.label}</div>
                    <div className="text-xs text-gray-500">{draft.pages} page{draft.pages > 1 ? 's' : ''}</div>
                  </div>
                  <div className="text-sm text-gray-600">{draft.shop || draft.company} • {draft.date}</div>
                </div>
              </div>
            </button>
          )
        })}
      </div>

      {recentDrafts.length === 0 && (
        <div className="text-center py-8">
          <FileText className="w-12 h-12 mx-auto mb-4 text-gray-400" />
          <div className="text-gray-600 mb-4">No recent documents to add to</div>
          <button
            onClick={onBack}
            className="text-blue-600 hover:text-blue-800 font-medium"
          >
            Start a new document instead
          </button>
        </div>
      )}
    </div>
  )
}
