name: Code Quality & Architecture Checks

on:
  pull_request:
    branches: [main, develop]
  push:
    branches: [main, develop]

jobs:
  lint-architecture:
    name: 🏗️ Architecture & Patterns
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: 📚 Install dependencies
        run: npm ci

      - name: 🔍 Check for hardcoded URLs
        run: |
          echo "🔍 Scanning for hardcoded localhost URLs..."
          if grep -r "http://localhost" --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx" \
            --exclude-dir="node_modules" \
            --exclude-dir=".next" \
            --exclude-dir="dist" \
            --exclude-dir="build" \
            --exclude-dir="__tests__" \
            --exclude-dir="tests" \
            --exclude-dir="scripts" \
            --exclude-dir="docs" \
            app/ components/ features/ lib/; then
            echo "❌ Found hardcoded localhost URLs!"
            echo "Use apiUrl() from @/lib/utils/api-url instead"
            exit 1
          fi
          
          echo "🔍 Scanning for hardcoded production URLs..."
          if grep -r "https://motomind.app" --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx" \
            --exclude-dir="node_modules" \
            --exclude-dir=".next" \
            --exclude-dir="dist" \
            --exclude-dir="build" \
            --exclude-dir="__tests__" \
            --exclude-dir="tests" \
            --exclude-dir="scripts" \
            --exclude-dir="docs" \
            app/ components/ features/ lib/; then
            echo "❌ Found hardcoded production URLs!"
            echo "Use apiUrl() or absoluteApiUrl() instead"
            exit 1
          fi
          
          echo "✅ No hardcoded URLs found!"

      - name: 🎯 Check for non-barrel imports
        run: |
          echo "🔍 Scanning for non-barrel design system imports..."
          if grep -r "from '../.*primitives\|from '../.*patterns\|from '../.*feedback\|from '../.*forms'" \
            --include="*.ts" --include="*.tsx" \
            --exclude-dir="node_modules" \
            --exclude-dir=".next" \
            components/ features/ app/; then
            echo "❌ Found non-barrel imports!"
            echo "Use: import { Component } from '@/components/design-system'"
            exit 1
          fi
          
          echo "✅ All imports use barrel exports!"

      - name: 🧹 ESLint (MotoMind Rules)
        run: npx eslint . --config .eslintrc.motomind.js --ext .ts,.tsx --max-warnings 0
        continue-on-error: false

      - name: 📊 TypeScript Check
        run: npx tsc --noEmit

      - name: 🛡️ Check circular dependencies
        run: npm run ai-platform:guardian -- --check || echo "⚠️ Circular dependencies detected (non-blocking)"
        continue-on-error: true

  test-quality:
    name: 🧪 Tests & Coverage
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: 📚 Install dependencies
        run: npm ci

      - name: 🧪 Run tests
        run: npm test -- --coverage --passWithNoTests
        env:
          CI: true

      - name: 📊 Upload coverage
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage/coverage-final.json
          flags: unittests
          name: codecov-umbrella
        continue-on-error: true

  bundle-size:
    name: 📦 Bundle Size Check
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: 📚 Install dependencies
        run: npm ci

      - name: 🏗️ Build application
        run: npm run build
        env:
          NODE_ENV: production

      - name: 📊 Analyze bundle
        run: |
          echo "📊 Bundle size analysis..."
          du -sh .next/ || echo "Build directory not found"
          
          # Check if bundle is too large (> 5MB)
          size=$(du -sm .next/ | cut -f1)
          if [ $size -gt 5 ]; then
            echo "⚠️ Bundle size is large: ${size}MB (threshold: 5MB)"
          else
            echo "✅ Bundle size OK: ${size}MB"
          fi

  architecture-validation:
    name: 🏛️ Architecture Validation
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: 📚 Install dependencies
        run: npm ci

      - name: 🏛️ Validate feature architecture
        run: npm run arch:validate || echo "⚠️ Architecture validation failed (non-blocking)"
        continue-on-error: true

      - name: 📈 Code quality metrics
        run: npm run ai-platform:quality || echo "⚠️ Quality check completed with warnings"
        continue-on-error: true

  security-audit:
    name: 🔒 Security Audit
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: 🔒 NPM Audit
        run: npm audit --production --audit-level=high
        continue-on-error: true

      - name: 🛡️ Check for secrets
        run: |
          echo "🔍 Scanning for potential secrets..."
          if grep -r "sk-\|pk_\|api_key\|secret_key" \
            --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx" \
            --exclude-dir="node_modules" \
            --exclude-dir=".next" \
            --exclude-dir="docs" \
            app/ components/ features/ lib/; then
            echo "⚠️ Potential secrets found - please review"
            # Don't fail, just warn
          fi
          echo "✅ Secret scan complete"

  # Summary job that must pass for PR merge
  quality-gate:
    name: ✅ Quality Gate
    runs-on: ubuntu-latest
    needs: [lint-architecture, test-quality]
    if: always()
    
    steps:
      - name: ✅ Check quality gate
        run: |
          if [ "${{ needs.lint-architecture.result }}" != "success" ]; then
            echo "❌ Architecture checks failed!"
            exit 1
          fi
          
          if [ "${{ needs.test-quality.result }}" != "success" ]; then
            echo "❌ Tests failed!"
            exit 1
          fi
          
          echo "✅ All quality checks passed!"
