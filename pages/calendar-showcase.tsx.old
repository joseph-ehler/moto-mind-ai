'use client'

import * as React from 'react'
import {
  Container,
  Section,
  Stack,
  Grid,
  Heading,
  Text,
  Button,
  Calendar,
  EventFormData,
  MaintenanceEvent,
  MAINTENANCE_TYPES
} from '@/components/design-system'

// Sample maintenance events - using current month for visibility
const getSampleEvents = (): MaintenanceEvent[] => {
  const today = new Date()
  const currentMonth = today.getMonth()
  const currentYear = today.getFullYear()
  
  return [
    {
      id: '1',
      title: 'Oil Change',
      description: '5W-30 synthetic oil change',
      type: 'oil_change',
      startDate: new Date(currentYear, currentMonth, 15, 10, 0),
      allDay: false,
      vehicleName: '2022 Honda Accord',
      serviceProvider: 'Honda Service Center',
      estimatedCost: 75.00,
      status: 'scheduled',
      createdAt: new Date()
    },
    {
      id: '2',
      title: 'Tire Rotation',
      type: 'tire_rotation',
      startDate: new Date(currentYear, currentMonth, 20, 9, 0),
      allDay: true,
      vehicleName: '2022 Honda Accord',
      serviceProvider: 'Discount Tire',
      estimatedCost: 40.00,
      status: 'scheduled',
      createdAt: new Date()
    },
    {
      id: '3',
      title: 'State Inspection',
      type: 'inspection',
      startDate: new Date(currentYear, currentMonth, 25, 14, 0),
      allDay: false,
      vehicleName: '2022 Honda Accord',
      status: 'scheduled',
      createdAt: new Date()
    }
  ]
}

const vehicles = [
  { id: 'vehicle-1', name: '2022 Honda Accord' },
  { id: 'vehicle-2', name: '2019 Toyota Camry' },
  { id: 'vehicle-3', name: '2021 Ford F-150' }
]

export default function CalendarShowcasePage() {
  const [events, setEvents] = React.useState<MaintenanceEvent[]>(getSampleEvents())

  const handleCreate = async (data: EventFormData) => {
    const newEvent: MaintenanceEvent = {
      id: `event-${Date.now()}`,
      ...data,
      status: 'scheduled',
      createdAt: new Date()
    }
    setEvents(prev => [...prev, newEvent])
  }

  const handleUpdate = async (id: string, data: EventFormData) => {
    setEvents(prev => prev.map(e => 
      e.id === id ? { ...e, ...data, updatedAt: new Date() } : e
    ))
  }

  const handleDelete = async (id: string) => {
    setEvents(prev => prev.filter(e => e.id !== id))
  }

  const handleReset = () => {
    setEvents(getSampleEvents())
  }

  return (
    <Container size="xl" useCase="data_tables">
      <Section spacing="xl">
        <Stack spacing="xl">
          {/* Header */}
          <div>
            <Heading level="hero">Calendar Showcase ðŸ“…</Heading>
            <Text className="text-xl text-black/60 mt-4">
              Maintenance scheduling with month view, agenda view, and event management
            </Text>
            <Text className="text-sm text-black/40 mt-2">
              Phase 1: View & Export â€¢ Phase 2: Create, Edit, Delete & Recurring Events
            </Text>
          </div>

          {/* Quick Controls */}
          <div className="bg-blue-50 rounded-xl border-2 border-blue-200 p-6">
            <Stack spacing="md">
              <div>
                <Heading level="title">Interactive Demo</Heading>
                <Text className="text-black/60">Click dates to create, click events to edit</Text>
              </div>
              <div className="flex gap-3">
                <Button variant="outline" size="sm" onClick={handleReset}>
                  Reset Sample Data
                </Button>
                <Text className="text-sm text-black/60 flex items-center">
                  {events.length} events
                </Text>
              </div>
            </Stack>
          </div>

          {/* Calendar Component */}
          <div className="bg-white rounded-xl border border-black/10 p-6">
            <Calendar
              events={events}
              onEventCreate={handleCreate}
              onEventUpdate={handleUpdate}
              onEventDelete={handleDelete}
              vehicles={vehicles}
            />
          </div>

          {/* Features */}
          <div className="bg-gradient-to-br from-purple-50 to-pink-50 rounded-xl border-2 border-purple-200 p-6">
            <Stack spacing="lg">
              <div>
                <Heading level="title">Features</Heading>
                <Text className="text-black/60">Complete maintenance scheduling system</Text>
              </div>

              <Grid columns={2} gap="lg">
                <Stack spacing="md">
                  <Text className="text-sm font-semibold text-purple-900">Phase 1</Text>
                  <Stack spacing="xs">
                    <Text className="text-sm text-black">â€¢ Month view with event indicators</Text>
                    <Text className="text-sm text-black">â€¢ Event cards with full details</Text>
                    <Text className="text-sm text-black">â€¢ Export to Google/Outlook/Apple Calendar</Text>
                    <Text className="text-sm text-black">â€¢ Status badges (scheduled, overdue)</Text>
                  </Stack>
                </Stack>

                <Stack spacing="md">
                  <Text className="text-sm font-semibold text-purple-900">Phase 2</Text>
                  <Stack spacing="xs">
                    <Text className="text-sm text-black">â€¢ Click dates to create events</Text>
                    <Text className="text-sm text-black">â€¢ Click events to edit/delete</Text>
                    <Text className="text-sm text-black">â€¢ Recurring event configuration</Text>
                    <Text className="text-sm text-black">â€¢ Agenda view (list format)</Text>
                  </Stack>
                </Stack>
              </Grid>
            </Stack>
          </div>

          {/* Maintenance Types */}
          <div className="bg-slate-50 rounded-xl border border-slate-200 p-6">
            <Stack spacing="lg">
              <div>
                <Heading level="title">Maintenance Types</Heading>
                <Text className="text-black/60">10 pre-configured types with icons and intervals</Text>
              </div>

              <Grid columns={5} gap="md">
                {Object.values(MAINTENANCE_TYPES).map(type => {
                  const IconComponent = type.icon
                  return (
                    <div
                      key={type.type}
                      className="p-4 bg-white rounded-lg border border-slate-200 text-center"
                    >
                      <div className="flex justify-center mb-2">
                        <IconComponent className="w-8 h-8" />
                      </div>
                      <Text className="text-xs font-medium text-black">{type.label}</Text>
                      {type.defaultIntervalMonths && (
                        <Text className="text-xs text-black/40 mt-1">
                          Every {type.defaultIntervalMonths} mo
                        </Text>
                      )}
                    </div>
                  )
                })}
              </Grid>
            </Stack>
          </div>

          {/* Usage */}
          <div className="bg-slate-900 text-white rounded-xl p-6">
            <Stack spacing="md">
              <Heading level="title" className="text-white">Usage Example</Heading>
              <pre className="text-xs bg-slate-800 p-4 rounded overflow-x-auto">
{`import { Calendar, EventFormData } from '@/components/design-system'

function MaintenancePage() {
  const [events, setEvents] = useState<MaintenanceEvent[]>([])
  
  const handleCreate = async (data: EventFormData) => {
    const newEvent = { id: generateId(), ...data, status: 'scheduled' }
    await api.createEvent(newEvent)
    setEvents(prev => [...prev, newEvent])
  }
  
  return (
    <Calendar
      events={events}
      onEventCreate={handleCreate}
      onEventUpdate={handleUpdate}
      onEventDelete={handleDelete}
      vehicles={vehicles}
    />
  )
}`}
              </pre>
            </Stack>
          </div>
        </Stack>
      </Section>
    </Container>
  )
}
