PROMPT SENT:
You are an expert fuel receipt analyzer. Extract structured data from this fuel receipt.

Return valid JSON matching this exact schema:
{
  "station_name": string|null,
  "total_amount": number|null,
  "gallons": number|null,
  "price_per_gallon": number|null,
  "fuel_type": string|null,
  "date": YYYY-MM-DD|null,
  "time": HH:MM|null (VISUAL HINT: Look near DATE field, often on same line or directly below. Format: "10:40 AM" → "10:40"),
  "payment_method": string|null,
  "pump_number": string|null (VISUAL HINT: Look in top 1/3 of receipt, labeled "PUMP" or "PUMP #"),
  "transaction_number": string|null (VISUAL HINT: Look in top 1/3 of receipt, labeled "TRAN#", "TRAN #", "TRANS#", or "Transaction". Return ONLY the number.),
  "tax_amount": number|null (VISUAL HINT: Look in bottom 1/3 of receipt for line containing "TAX". Format: "$ 4.43 TAX" → 4.43),
  "confidence": number 0-1
}

CRITICAL NOTES:
- ⚠️ MANDATORY FIELDS: time, pump_number, transaction_number, tax_amount
- ⚠️ These fields appear on MOST fuel receipts - look carefully!
- ⚠️ Time: Usually near date field (top of receipt)
- ⚠️ Pump & Transaction: Usually in top 20% of receipt
- ⚠️ Tax: Usually in bottom 20% of receipt, separate line item
- ⚠️ DO NOT return null unless field is truly not visible

Extraction Rules:
- Extract station name from header (Shell, Exxon, etc.)
- Parse amounts as numbers (remove $ and commas)
- Extract gallons and calculate price per gallon if not shown
- Identify fuel type (Regular, Premium, Diesel, etc.)
- Convert dates to YYYY-MM-DD format
- CRITICAL: Extract time in HH:MM 24-hour format. Look for "Time" field or timestamp. Convert AM/PM: "10:40 AM" → "10:40", "2:30 PM" → "14:30"
- Note payment method (Cash, Credit, Debit, VISA, MASTERCARD, etc.)
- CRITICAL: Extract pump number as STRING. Look for "PUMP", "PUMP#", or stand-alone number near top. Example: "PUMP 8" → "8"
- CRITICAL: Extract transaction_number as STRING. Look for "TRAN#", "TRANS#", "TRAN #", "Transaction", or "Receipt #". Example: "TRAN# 171" → "171"
- CRITICAL: Extract tax_amount as NUMBER. Look for line item with "TAX" label. Example: "$ 4.43 TAX" → 4.43. Do NOT include tax in total_amount.
- If you see a TAX line, subtract it from total to get pre-tax amount
- Return null for fields not clearly visible

FEW-SHOT EXAMPLES:

Example 1 - Receipt header shows: DATE 07/10/2020
          Time 10:40 AM
          PUMP 8
          TRAN# 171:
✓ CORRECT: time: "10:40", pump_number: "8", transaction_number: "171"
✗ INCORRECT: time: null, transaction_number: null (all three fields are visible!)

Example 2 - Receipt shows: "DATE 07/10/2020" on one line, "Time 10:40 AM" directly below:
✓ CORRECT: time: "10:40"
✗ INCORRECT: time: null (the time field is right there!)

Example 3 - Receipt shows "TRAN# 171" or "TRANS# 171" in top section:
✓ CORRECT: transaction_number: "171"
✗ INCORRECT: transaction_number: null (the TRAN# field is visible!)

Example 4 - Receipt bottom shows: $ 98.55 REG FUEL
                      $ 4.43 TAX
                      $-102.98 VISA DEBIT PAID:
✓ CORRECT: tax_amount: 4.43
✗ INCORRECT: tax_amount: null (the TAX line is clearly visible!)

Example 5 - Receipt shows "PUMP 8" or "PUMP# 8" near top:
✓ CORRECT: pump_number: "8"
✗ INCORRECT: pump_number: null (pump number is visible!)


RAW RESPONSE:
```json
{
  "station_name": "FUEL DEPOT",
  "total_amount": 98.55,
  "gallons": 33.182,
  "price_per_gallon": 2.97,
  "fuel_type": "REG FUEL",
  "date": "2020-07-10",
  "time": "10:40",
  "payment_method": "VISA DEBIT",
  "pump_number": "8",
  "transaction_number": "171",
  "tax_amount": 4.43,
  "confidence": 1.0
}
```

METADATA:
{
  "model": "gpt-4o-2024-08-06",
  "inputTokens": 1738,
  "outputTokens": 127,
  "processingMs": 9846
}